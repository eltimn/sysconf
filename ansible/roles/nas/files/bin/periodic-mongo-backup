#!/usr/bin/env bash

backup_name="${backup_name:-$(hostname)}"
backup_uri="${backup_uri:-localhost:27017}"
backup_keyfile="${backup_keyfile:-/etc/mongod.key}"
backup_path="${backup_path:-/srv/mongo-backups}"
backup_gzip="${backup_gzip:-true}"

dom=$(date +%d)                        # Day of month e.g. 08
dow=$(date +%A)                        # Day of the week e.g. Monday

periodic=daily

# Run the monthly version on the first day of the month
if [[ $dom = "01" ]]; then
  periodic=monthly
fi

# Run the weekly version on Saturday
if [[ $dow = "Saturday" ]]; then
  periodic=weekly
fi

file_path="$backup_path/$periodic"

if [ ! -d "$file_path" ]; then
  mkdir -p "$file_path"
fi

daily_retention=4
weekly_retention=4
monthly_retention=4

retention=$daily_retention

if [[ $periodic = "weekly" ]]; then
  retention=$weekly_retention
fi

if [[ $periodic = "monthly" ]]; then
  retention=$monthly_retention
fi

echo "Backing up mongo instance: $backup_name"

filename="$backup_name.$(date +%Y-%m-%d_%Hh%Mm).archive"

# Do the backup
backup_cmd=(/usr/bin/mongodump)
backup_cmd+=(--uri="$backup_uri")
# backup_cmd+=(--authenticationMechanism=MONGODB-X509)
# backup_cmd+=(--authenticationDatabase '$external')
# backup_cmd+=(--tls)
# backup_cmd+=(--tlsCertificateKeyFile "$backup_keyfile")
# backup_cmd+=()
backup_cmd+=(--archive="$file_path/$filename")
# backup_cmd+=(--oplog)
# backup_cmd+=(--quiet)

# if [[ ! -z "$backup_username" && ! -z "$backup_password" ]]; then
#   backup_cmd+=(--username="$backup_username")
#   backup_cmd+=(--password="$backup_password")
#   backup_cmd+=(--authenticationDatabase=admin)
# fi

if [ "$backup_gzip" = true ] ; then
  backup_cmd+=(--gzip)
fi

"${backup_cmd[@]}"

filesize=$(ls -lah "$file_path/$filename" | awk '{print $5}')
echo "Backup file saved: $file_path/$filename ($filesize)"

# Create the latest dir if it doesn't exist
if [ ! -d "$backup_path/latest" ]; then
  mkdir -p "$backup_path/latest"
fi

# Create a latest symlink
if [[ -f "$file_path/$filename" ]]; then
  link="$backup_path/latest/$backup_name.archive"

  if [[ -L "$link" ]]; then
    rm "$link"
  fi

  ln -s "../$periodic/$filename" "$link"
fi

# Rotate files
cd "$file_path"
ls -t | grep "$backup_name" | grep .archive | tail -n +$((retention+1)) | xargs -d '\n' rm -rf --

exit 0
