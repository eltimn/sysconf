#!/usr/bin/env bash

BACKUP_HOST=illmatic.home.eltimn.com

USERNAME=$(id -u -n)
USERNAME=${USERNAME:-unknown}

HOSTNAME=$(hostname -s)
HOSTNAME=${HOSTNAME:-unknown}

# delete the temp directories
function cleanup {
  rm -rf /tmp/backup-mongo.*
  echo "Deleted temp working directories"
}

# register the cleanup function to be called on the EXIT signal
trap cleanup EXIT

BACKUP_LOC=$BACKUP_HOST:/mnt/backup/$HOSTNAME
RSYNC_OPTS='-az --progress --delete-after'

# if [ ! -d "$BACKUP_LOC" ]; then
#   mkdir -p "$BACKUP_LOC/$USERNAME"
#   mkdir -p "$BACKUP_LOC/$USERNAME-dbs"
# fi

backup_local_dir () {
  #tar -czf $BACKUP_LOC/$USERNAME/$1.tgz -C /home/$USERNAME $1 -X /home/$USERNAME/.config/backup/exclude-local.txt
  rsync $RSYNC_OPTS --exclude-from=/home/$USERNAME/.config/backup/exclude-local.txt /home/$USERNAME/$1 $BACKUP_LOC/$USERNAME/
}

backup_code_dir () {
  #tar -czf $BACKUP_LOC/$USERNAME/$1.tgz -C  /home/$USERNAME $1 -X /home/$USERNAME/.config/backup/exclude-code.txt
  rsync $RSYNC_OPTS --exclude-from=/home/$USERNAME/.config/backup/exclude-code.txt /home/$USERNAME/$1 $BACKUP_LOC/$USERNAME/
}

backup_mongo () {
  HOSTANDPORT=$1
  DB=$2
  WORK_DIR=$(mktemp -d --tmpdir=/tmp backup-mongo.XXXXXXX)

  # check if tmp dir was created
  if [[ ! "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
    echo "Could not create temp dir"
    exit 1
  fi

  DUMP_DIR=$WORK_DIR/dump

  mkdir -p $DUMP_DIR

  # dump the db to a directory
  mongodump --host $HOSTANDPORT --db $DB --out $DUMP_DIR

  RESULT=$?   # returns 0 if mongodump succeeds

  if [ $RESULT -eq 0 ]; then
    echo "backing up: $HOSTANDPORT/$DB"
    # tar and zip it up
    tar -cvf $WORK_DIR/$DB.tgz -C $DUMP_DIR $DB
    # sync to backup server
    rsync $RSYNC_OPTS $WORK_DIR/$DB.tgz $BACKUP_LOC/$USERNAME-dbs/
  fi
}

backup_zen_data () {
	rsync $RSYNC_OPTS "/home/$USERNAME/.zen/" $BACKUP_LOC/$USERNAME/zen
}

backup_zen_profile () {
	local zen_profile_dir="$1"
	# pmd2fg35.Default (release)
	# places.sqlite: Contains bookmarks and history.
	# cookies.sqlite: Stores login sessions.
	# cert9.db + key4.db + logins.json: Holds your saved passwords.
	# extension-preferences.json + extensions.json + extension-settings.json + extensions folder: These files keep track of your installed add-ons (but not their custom settings).
	# search.json.mozlz4: Stores your search engine preferences.
	# sessionCheckpoints.json + sessionstore.jsonlz4: Saves your currently open tabs.
	# prefs.js: Contains your about:config settings.

	# rsync $RSYNC_OPTS $zen_profile_dir/places.sqlite $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/cookies.sqlite $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/extensions.json $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/extension-preferences.json $BACKUP_LOC/$USERNAME/zen-profile
	# # rsync $RSYNC_OPTS $zen_profile_dir/extension-settings.json $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/extensions $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/search.json.mozlz4 $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/sessionCheckpoints.json $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/sessionstore.jsonlz4 $BACKUP_LOC/$USERNAME/zen-profile
	# rsync $RSYNC_OPTS $zen_profile_dir/prefs.js $BACKUP_LOC/$USERNAME/zen-profile

	rsync $RSYNC_OPTS "/home/$USERNAME/.zen/$zen_profile_dir" $BACKUP_LOC/$USERNAME/zen-profile
}

# backup_zen_profile "pmd2fg35.Default (release)"
backup_zen_data

backup_local_dir Audio
backup_local_dir Documents
backup_local_dir Dropbox
backup_local_dir Gateway
backup_local_dir Notes
backup_local_dir Pictures
backup_local_dir secret-cipher
backup_local_dir workspaces

backup_code_dir code
backup_code_dir sandbox

# backup databases
# backup_mongo localhost:2700 acm-web
#backup_mongo localhost:2700 acmfiles
# backup_mongo localhost:2800 rotozen

echo "Backup Workstation" "Finished processing"

exit 0
